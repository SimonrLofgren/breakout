from classes.Object import Object
from config import *
import random
import pygame

class Ball(Object):
    def __init__(self, x, y, x_step, y_step, color, radius, screen, is_bouncy, is_indestructable):
        super().__init__(x, y, color, screen, is_bouncy, is_indestructable)
        self.x_step = x_step
        self.y_step = y_step
        self.radius = radius

        ######Ball hit box######
    @property
    def top(self):
        return self.y - self.radius

    @property
    def bottom(self):
        return self.y + self.radius

    @property
    def side_bottom(self):
        return self.x + self.radius

    @property
    def left(self):
        return self.x - self.radius

    @property
    def right(self):
        return self.x + self.radius
    @property
    def mid(self):
        return self.x + self.radius // 2

    def Move(self):
        self.x += self.x_step * 1
        self.y += self.y_step * 1

        if not self.radius <= self.x <= SCREEN_WIDTH - self.radius:
            self.x_step *= -1

        if not self.radius <= self.y <= SCREEN_HIGHT - self.radius:
            self.y_step *= -1

    def Draw(self):
        pygame.draw.circle(self.screen, self.color, (self.x, self.y), self.radius)

    def Reset(self):
        self.x = random.randrange(200, 400)
        self.y = random.randrange(200, 400)

    def show_next_hit(self):
        shadow_x = self.x
        shadow_y = self.y

        no_hit = True
        while no_hit:
            shadow_x += self.x_step
            shadow_y += self.y_step

            if not self.radius <= shadow_x <= SCREEN_WIDTH - self.radius:
                no_hit = False

            if not self.radius <= shadow_y <= SCREEN_HIGHT - self.radius:
                no_hit = False

        pygame.draw.circle(self.screen, WHITE, (shadow_x, shadow_y), self.radius, 2)

    ###prel death

    def dead(self):
        if self.y > SCREEN_HIGHT - self.radius:
            return True
